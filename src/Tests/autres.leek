include("/Classes/Leek")
include("/Brain/simpleActionSequence")
include("/Brain/PlanActScenario")
include("/Classes/Context/World")
include("/Classes/Plannification/ShootingOption")
include("/Classes/Plannification/ShootingOptions")


	global World world = new World()
	global kassbi = new Leek(getEntity(), planAct)

	// init
	world.buildObstaclesCoordinatesSet()
	world.setEnemiesLeeks()

	var turn = getTurn()
	if (turn > 1)
	{
		kassbi.updateData()
		world.updateData()
		// doit venir après le monde pour permettre l'update de la danger map'
		kassbi.updateDataMyLeeks()
	}
	kassbi.setTarget(getNearestEnemy())

	ShootingOptions so = new ShootingOptions()
	ShootingOption first = new ShootingOption()
	first.Init(kassbi)
	debug("shooting option " + first)
	pause()
	so.exploreOptions(kassbi,first, ShootingOption.buildDamagingItemsTable(kassbi))
	for(ShootingOption s in so.options)
		s.debugUsedItems()


	moveToward(getNearestEnemy())


