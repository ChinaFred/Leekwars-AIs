include("/Classes/Items/Effects")

class Item {
	public Leek? owner = null
	public integer id =-1
    public string name = ""
    public Array range = []
	public Effects effects = new Effects()
	public integer cost = 0
	public Array < integer > area = []
    public real meanDamage = 0.0
	public real meanHeal = 0.0
    public integer launch_type = -1
    public boolean needLos = false
	public string type = "item"

	constructor(myId){
			id = myId
            name = "myItem"
	}
	
	real getMeanDamage(Leek leek) {
		if(this.effects.effect_damage!=null)
			return (
					this.effects.effect_damage.min 
					+ 
					(this.effects.effect_damage.max - this.effects.effect_damage.min) * 0.5
				   )  * (1 + leek.strength / 100);
			//return (this.effects.effect_damage.min + this.effects.effect_damage.max) / 2
		else 
			return 0.
	}
	
	real getMeanHeal(Leek leek) {
		if(this.effects.effect_heal!=null)
			return (
						(	
							this.effects.effect_heal.min 
							+ 
							(this.effects.effect_heal.max - this.effects.effect_heal.min) * 0.5
						) * (1 + leek.wisdom / 100)
					)
			//return (this.effects.effect_heal.min + this.effects.effect_heal.max) / 2
		else 
			return 0.
	}
	
	Set < integer > fromWhereToUse(Leek target, Set < integer > reachabelCells) {
		return <-1>
	}

	Set < integer > fromWhereToUseOnCell(integer cell, Set < integer > reachabelCells) {
		return <-1>
	}
		
	Set<integer> whereCanHeUse( Set < integer > reachabelCells){
		return <-1>
	}
		
	Action getActionUse(Leek leek,Leek target){
		return new Action() 
	}
		
	Action getActionEquip(Leek leek){
		return new Action("Equip item", function() {
				debug("no need to equip items " + this.name)
			}, 
			"Equip" + this.name)
	}
	

}